[{"E:\\react-condy-crush\\candy-crush\\src\\index.js":"1","E:\\react-condy-crush\\candy-crush\\src\\App.js":"2","E:\\react-condy-crush\\candy-crush\\src\\components\\ScoreBoard.js":"3"},{"size":214,"mtime":1641707055732,"results":"4","hashOfConfig":"5"},{"size":6678,"mtime":1635661261385,"results":"6","hashOfConfig":"5"},{"size":186,"mtime":1641707070175,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l0c4jg",{"filePath":"10","messages":"11","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\react-condy-crush\\candy-crush\\src\\index.js",[],"E:\\react-condy-crush\\candy-crush\\src\\App.js",["15","16","17","18","19","20"],"import {useEffect, useState } from \"react\"\nimport ScoreBoard from \"./components/ScoreBoard\"\nimport blueCandy from'./images/blue-candy.png'\nimport greenCandy from'./images/green-candy.png'\nimport orangeCandy from'./images/orange-candy.png'\nimport purpleCandy from'./images/purple-candy.png'\nimport redCandy from'./images/red-candy.png'\nimport yellowCandy from'./images/yellow-candy.png'\nimport blank from'./images/blank.png'\n\nconst width =  8\nconst candyColors = [\n    blueCandy,\n    greenCandy,\n    orangeCandy,\n    purpleCandy,\n    redCandy,\n    yellowCandy\n]\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState ([])\n  const [ squareBeingDargged, setSquareBeingDargged] = useState(null)\n  const [ squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n  const [ scoreDisplay, setScoreDisplay] = useState(0)\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i +width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i +2, i +3]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i +width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i +2]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i < 55 - width; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(i)\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n         let randomNumber = Math.floor(Math.random() * candyColors.length)\n         currentColorArrangement[i] = candyColors[randomNumber]\n      }\n\n      if ((currentColorArrangement[i + width]) === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i]\n        currentColorArrangement[i] = blank\n      }\n    }\n  }\n\n  const dragStart = (e) => {\n    setSquareBeingDargged(e.target)\n  }\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target)\n  }\n  const dragEnd = (e) => {\n    \n    const squareBeingDarggedId = parseInt(squareBeingDargged.getAttribute('data-id'))\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDargged.getAttribute('src')\n    currentColorArrangement[squareBeingDarggedId] = squareBeingReplaced.getAttribute('src')\n\n    const validMoves = [\n      squareBeingDarggedId -1,\n      squareBeingDarggedId - width,\n      squareBeingDarggedId +1,\n      squareBeingDarggedId + width\n\n    ]\n\n    const validMove = validMoves.includes(squareBeingReplacedId)\n\n     const isAColumnOfFour = checkForColumnOfFour()\n     const isARowOfFour = checkForRowOfFour()\n     const isAColumnOfThree = checkForColumnOfThree()\n     const isARowOfThree = checkForRowOfThree()\n\n     if (squareBeingReplacedId && validMove && ( isARowOfThree || isARowOfFour || isAColumnOfFour || isARowOfThree)) {\n       setSquareBeingDargged(null)\n        setSquareBeingReplaced(null)\n     } else {\n       currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n       currentColorArrangement[squareBeingDarggedId] = squareBeingDargged.getAttribute('src')\n       setCurrentColorArrangement([...currentColorArrangement])\n     }\n  }\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n    for(let i = 0; i < width * width; i++) {\n        const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n        randomColorArrangement.push(randomColor)\n    }\n    setCurrentColorArrangement(randomColorArrangement)\n}\n\nuseEffect(() => {\n  createBoard()\n}, [])\n\nuseEffect(() => {\n  const timer = setInterval(() => {\n    checkForColumnOfFour()\n    checkForRowOfFour()\n    checkForColumnOfThree()\n    checkForRowOfThree()\n    moveIntoSquareBelow()\n    setCurrentColorArrangement([...currentColorArrangement]) \n  }, 100)\n  return () => clearInterval(timer)\n\n}, [ checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\nconsole.log(currentColorArrangement)\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColors, index) => (\n          <img\n            key={index}\n            src={candyColors}\n            alt={candyColors}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDisplay}/>\n    </div>\n  )\n}\n\nexport default App\n","E:\\react-condy-crush\\candy-crush\\src\\components\\ScoreBoard.js",[],{"ruleId":"21","severity":1,"message":"22","line":27,"column":9,"nodeType":"23","endLine":39,"endColumn":4,"suggestions":"24"},{"ruleId":"21","severity":1,"message":"25","line":41,"column":9,"nodeType":"23","endLine":56,"endColumn":4,"suggestions":"26"},{"ruleId":"21","severity":1,"message":"27","line":59,"column":9,"nodeType":"23","endLine":71,"endColumn":4,"suggestions":"28"},{"ruleId":"21","severity":1,"message":"29","line":73,"column":9,"nodeType":"23","endLine":88,"endColumn":4,"suggestions":"30"},{"ruleId":"21","severity":1,"message":"31","line":90,"column":9,"nodeType":"23","endLine":105,"endColumn":4},{"ruleId":"32","severity":1,"message":"33","line":132,"column":12,"nodeType":"34","messageId":"35","endLine":132,"endColumn":28},"react-hooks/exhaustive-deps","The 'checkForColumnOfFour' function makes the dependencies of useEffect Hook (at line 169) change on every render. To fix this, wrap the definition of 'checkForColumnOfFour' in its own useCallback() Hook.","VariableDeclarator",["36"],"The 'checkForRowOfFour' function makes the dependencies of useEffect Hook (at line 169) change on every render. To fix this, wrap the definition of 'checkForRowOfFour' in its own useCallback() Hook.",["37"],"The 'checkForColumnOfThree' function makes the dependencies of useEffect Hook (at line 169) change on every render. To fix this, wrap the definition of 'checkForColumnOfThree' in its own useCallback() Hook.",["38"],"The 'checkForRowOfThree' function makes the dependencies of useEffect Hook (at line 169) change on every render. To fix this, wrap the definition of 'checkForRowOfThree' in its own useCallback() Hook.",["39"],"The 'moveIntoSquareBelow' function makes the dependencies of useEffect Hook (at line 169) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'moveIntoSquareBelow' in its own useCallback() Hook.","no-unused-vars","'isAColumnOfThree' is assigned a value but never used.","Identifier","unusedVar",{"desc":"40","fix":"41"},{"desc":"42","fix":"43"},{"desc":"44","fix":"45"},{"desc":"46","fix":"47"},"Wrap the definition of 'checkForColumnOfFour' in its own useCallback() Hook.",{"range":"48","text":"49"},"Wrap the definition of 'checkForRowOfFour' in its own useCallback() Hook.",{"range":"50","text":"51"},"Wrap the definition of 'checkForColumnOfThree' in its own useCallback() Hook.",{"range":"52","text":"53"},"Wrap the definition of 'checkForRowOfThree' in its own useCallback() Hook.",{"range":"54","text":"55"},[889,1386],"useCallback(() => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i +width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  })",[1416,2041],"useCallback(() => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i +2, i +3]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  })",[2076,2561],"useCallback(() => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i +width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  })",[2592,3183],"useCallback(() => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i +2]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  })"]