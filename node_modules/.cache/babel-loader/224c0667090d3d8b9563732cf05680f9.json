{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-condy-crush\\\\candy-crush\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport blueCandy from './images/blue-candy.png';\nimport greenCandy from './images/green-candy.png';\nimport orangeCandy from './images/orange-candy.png';\nimport purpleCandy from './images/purple-candy.png';\nimport redCandy from './images/red-candy.png';\nimport yellowCandy from './images/yellow-candy.png';\nimport blank from './images/blank.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = [blueCandy, greenCandy, orangeCandy, purpleCandy, redCandy, yellowCandy];\n\nconst App = () => {\n  _s();\n\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDargged, setSquareBeingDargged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 63; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 4);\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 4);\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 64; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 3);\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 3);\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i < 64 - width; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n\n  const dragStart = e => {\n    setSquareBeingDargged(e.target);\n  };\n\n  const dragDrop = e => {\n    setSquareBeingReplaced(e.target);\n  };\n\n  const dragEnd = e => {\n    const squareBeingDarggedId = parseInt(squareBeingDargged.getAttribute('data-id'));\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDargged.getAttribute('src');\n    currentColorArrangement[squareBeingDarggedId] = squareBeingReplaced.getAttribute('src');\n    const validMoves = [squareBeingDarggedId - 1, squareBeingDarggedId - width, squareBeingDarggedId + 1, squareBeingDarggedId + width];\n    const validMove = validMoves.includes(squareBeingReplacedId);\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isARowOfThree)) {\n      setSquareBeingDargged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src');\n      currentColorArrangement[squareBeingDarggedId] = squareBeingDargged.getAttribute('src');\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement]);\n  console.log(currentColorArrangement);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColors, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: candyColors,\n        alt: candyColors,\n        \"data-id\": index,\n        draggable: true,\n        onDragStart: dragStart,\n        onDragOver: e => e.preventDefault(),\n        onDragEnter: e => e.preventDefault(),\n        onDragLeave: e => e.preventDefault(),\n        onDrop: dragDrop,\n        onDragEnd: dragEnd\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      score: scoreDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Ysj9964fPfJYDeMey9fqBf7XkOI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/react-condy-crush/candy-crush/src/App.js"],"names":["useEffect","useState","ScoreBoard","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","blank","width","candyColors","App","currentColorArrangement","setCurrentColorArrangement","squareBeingDargged","setSquareBeingDargged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","decidedColor","isBlank","every","square","score","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","firstRow","isFirstRow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDarggedId","parseInt","getAttribute","squareBeingReplacedId","validMoves","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","createBoard","randomColorArrangement","randomColor","push","timer","setInterval","clearInterval","console","log","map","index","preventDefault"],"mappings":"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","sourcesContent":["import {useEffect, useState } from \"react\"\nimport ScoreBoard from \"./components/ScoreBoard\"\nimport blueCandy from'./images/blue-candy.png'\nimport greenCandy from'./images/green-candy.png'\nimport orangeCandy from'./images/orange-candy.png'\nimport purpleCandy from'./images/purple-candy.png'\nimport redCandy from'./images/red-candy.png'\nimport yellowCandy from'./images/yellow-candy.png'\nimport blank from'./images/blank.png'\n\nconst width =  8\nconst candyColors = [\n    blueCandy,\n    greenCandy,\n    orangeCandy,\n    purpleCandy,\n    redCandy,\n    yellowCandy\n]\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState ([])\n  const [ squareBeingDargged, setSquareBeingDargged] = useState(null)\n  const [ squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n  const [ scoreDisplay, setScoreDisplay] = useState(0)\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 63; i++) {\n      const columnOfFour = [i, i +width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i +2, i +3]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 4)\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 64; i++) {\n      const columnOfThree = [i, i +width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i +2]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n      const isBlank = currentColorArrangement[i] === blank\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay((score) => score + 3)\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i < 64 - width; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(i)\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n         let randomNumber = Math.floor(Math.random() * candyColors.length)\n         currentColorArrangement[i] = candyColors[randomNumber]\n      }\n\n      if ((currentColorArrangement[i + width]) === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i]\n        currentColorArrangement[i] = blank\n      }\n    }\n  }\n\n  const dragStart = (e) => {\n    setSquareBeingDargged(e.target)\n  }\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target)\n  }\n  const dragEnd = (e) => {\n    \n    const squareBeingDarggedId = parseInt(squareBeingDargged.getAttribute('data-id'))\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDargged.getAttribute('src')\n    currentColorArrangement[squareBeingDarggedId] = squareBeingReplaced.getAttribute('src')\n\n    const validMoves = [\n      squareBeingDarggedId -1,\n      squareBeingDarggedId - width,\n      squareBeingDarggedId +1,\n      squareBeingDarggedId + width\n\n    ]\n\n    const validMove = validMoves.includes(squareBeingReplacedId)\n\n     const isAColumnOfFour = checkForColumnOfFour()\n     const isARowOfFour = checkForRowOfFour()\n     const isAColumnOfThree = checkForColumnOfThree()\n     const isARowOfThree = checkForRowOfThree()\n\n     if (squareBeingReplacedId && validMove && ( isARowOfThree || isARowOfFour || isAColumnOfFour || isARowOfThree)) {\n       setSquareBeingDargged(null)\n        setSquareBeingReplaced(null)\n     } else {\n       currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n       currentColorArrangement[squareBeingDarggedId] = squareBeingDargged.getAttribute('src')\n       setCurrentColorArrangement([...currentColorArrangement])\n     }\n  }\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n    for(let i = 0; i < width * width; i++) {\n        const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n        randomColorArrangement.push(randomColor)\n    }\n    setCurrentColorArrangement(randomColorArrangement)\n}\n\nuseEffect(() => {\n  createBoard()\n}, [])\n\nuseEffect(() => {\n  const timer = setInterval(() => {\n    checkForColumnOfFour()\n    checkForRowOfFour()\n    checkForColumnOfThree()\n    checkForRowOfThree()\n    moveIntoSquareBelow()\n    setCurrentColorArrangement([...currentColorArrangement]) \n  }, 100)\n  return () => clearInterval(timer)\n\n}, [ checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\nconsole.log(currentColorArrangement)\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColors, index) => (\n          <img\n            key={index}\n            src={candyColors}\n            alt={candyColors}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDisplay}/>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}