{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-condy-crush\\\\candy-crush\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = ['blue', 'green', 'orange', 'purple', 'red', 'yellow'];\n\nconst App = () => {\n  _s();\n\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i < 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangement[square] = '');\n      }\n    }\n  };\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i < 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfFour.forEach(square => currentColorArrangement[square] = '');\n      }\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfThree();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfThree, currentColorArrangement]);\n  console.log(currentColorArrangement);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColors, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          backgroundColor: candyColors\n        },\n        alt: candyColors\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"uoaHbVJS2NtlYqhXtmTeW0LXKPg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/react-condy-crush/candy-crush/src/App.js"],"names":["useEffect","useState","width","candyColors","App","currentColorArrangement","setCurrentColorArrangement","checkForColumnOfThree","i","columnOfThree","decidedColor","every","square","forEach","checkForColumnOfFour","columnOfFour","createBoard","randomColorArrangement","randomColor","Math","floor","random","length","push","timer","setInterval","clearInterval","console","log","map","index","backgroundColor"],"mappings":"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","sourcesContent":["import {useEffect, useState } from \"react\"\n\nconst width =  8\nconst candyColors = [\n    'blue',\n    'green',\n    'orange',\n    'purple',\n    'red',\n    'yellow'\n]\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState ([])\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i < 47; i++) {\n      const columnOfThree = [i, i +width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n\n      if ( columnOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangement[square] = '')\n      }\n    }\n  }\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i < 39; i++) {\n      const columnOfFour = [i, i +width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n\n      if ( columnOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfFour.forEach(square => currentColorArrangement[square] = '')\n      }\n    }\n  }\n\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n    for(let i = 0; i < width * width; i++) {\n        const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n        randomColorArrangement.push(randomColor)\n    }\n    setCurrentColorArrangement(randomColorArrangement)\n}\n\nuseEffect(() => {\n  createBoard()\n}, [])\n\nuseEffect(() => {\n  const timer = setInterval(() => {\n    checkForColumnOfThree()\n    setCurrentColorArrangement([...currentColorArrangement]) \n  }, 100)\n  return () => clearInterval(timer)\n\n}, [checkForColumnOfThree, currentColorArrangement])\n\nconsole.log(currentColorArrangement)\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColors, index : number) => (\n          <img\n            key={index}\n            style={{backgroundColor: candyColors}}\n            alt={candyColors}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}