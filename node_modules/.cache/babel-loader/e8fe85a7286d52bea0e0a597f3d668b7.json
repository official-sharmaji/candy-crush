{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-condy-crush\\\\candy-crush\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport blueCandy from './images/blue-candy.png';\nimport greenCandy from './images/green-candy.png';\nimport orangeCandy from './images/orange-candy.png';\nimport purpleCandy from './images/purple-candy.png';\nimport redCandy from './images/red-candy.png';\nimport yellowCandy from './images/yellow-candy.png';\nimport blank from './images/blank.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = ['blue', 'green', 'orange', 'purple', 'red', 'yellow'];\n\nconst App = () => {\n  _s();\n\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDargged, setSquareBeingDargged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfFour.forEach(square => currentColorArrangement[square] = '');\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n      if (notValid.includes(i)) continue;\n\n      if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        rowOfFour.forEach(square => currentColorArrangement[square] = '');\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangement[square] = '');\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n      if (notValid.includes(i)) continue;\n\n      if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        rowOfThree.forEach(square => currentColorArrangement[square] = '');\n        return true;\n      }\n    }\n  };\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i < 55 - width; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === '') {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n\n      if (currentColorArrangement[i + width] === '') {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = '';\n      }\n    }\n  };\n\n  const dragStart = e => {\n    console.log(e.target);\n    console.log('darg start');\n    setSquareBeingDargged(e.target);\n  };\n\n  const dragDrop = e => {\n    console.log(e.target);\n    console.log('darg drop');\n    setSquareBeingReplaced(e.target);\n  };\n\n  const dragEnd = e => {\n    console.log('darg end');\n    const squareBeingDarggedId = parseInt(squareBeingDargged.getAttribute('data-id'));\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'));\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDargged.style.backgroundColor;\n    currentColorArrangement[squareBeingDarggedId] = squareBeingReplaced.style.backgroundColor;\n    const validMoves = [squareBeingDarggedId - 1, squareBeingDarggedId - width, squareBeingDarggedId + 1, squareBeingDarggedId + width];\n    const validMove = validMoves.includes(squareBeingReplacedId);\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isARowOfThree)) {\n      setSquareBeingDargged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.style.backgroundColor;\n      currentColorArrangement[squareBeingDarggedId] = squareBeingDargged.style.backgroundColor;\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement]);\n  console.log(currentColorArrangement);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColors, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          backgroundColor: candyColors\n        },\n        alt: candyColors,\n        \"data-id\": index,\n        draggable: true,\n        onDragStart: dragStart,\n        onDragOver: e => e.preventDefault(),\n        onDragEnter: e => e.preventDefault(),\n        onDragLeave: e => e.preventDefault(),\n        onDrop: dragDrop,\n        onDragEnd: dragEnd\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"qZbK3N1DG+fQI3ECRneQEqnX5I8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/react-condy-crush/candy-crush/src/App.js"],"names":["useEffect","useState","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","blank","width","candyColors","App","currentColorArrangement","setCurrentColorArrangement","squareBeingDargged","setSquareBeingDargged","squareBeingReplaced","setSquareBeingReplaced","checkForColumnOfFour","i","columnOfFour","decidedColor","every","square","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","firstRow","isFirstRow","randomNumber","Math","floor","random","length","dragStart","e","console","log","target","dragDrop","dragEnd","squareBeingDarggedId","parseInt","getAttribute","squareBeingReplacedId","style","backgroundColor","validMoves","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","createBoard","randomColorArrangement","randomColor","push","timer","setInterval","clearInterval","map","index","preventDefault"],"mappings":"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","sourcesContent":["import {useEffect, useState } from \"react\"\nimport blueCandy from'./images/blue-candy.png'\nimport greenCandy from'./images/green-candy.png'\nimport orangeCandy from'./images/orange-candy.png'\nimport purpleCandy from'./images/purple-candy.png'\nimport redCandy from'./images/red-candy.png'\nimport yellowCandy from'./images/yellow-candy.png'\nimport blank from'./images/blank.png'\n\nconst width =  8\nconst candyColors = [\n    'blue',\n    'green',\n    'orange',\n    'purple',\n    'red',\n    'yellow'\n]\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState ([])\n  const [ squareBeingDargged, setSquareBeingDargged] = useState(null)\n  const [ squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i +width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n\n      if ( columnOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfFour.forEach(square => currentColorArrangement[square] = '')\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i +2, i +3]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        rowOfFour.forEach(square => currentColorArrangement[square] = '')\n        return true\n      }\n    }\n  }\n\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i +width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n\n      if ( columnOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangement[square] = '')\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i +2]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        rowOfThree.forEach(square => currentColorArrangement[square] = '')\n        return true\n      }\n    }\n  }\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i < 55 - width; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(i)\n\n      if (isFirstRow && currentColorArrangement[i] === '') {\n         let randomNumber = Math.floor(Math.random() * candyColors.length)\n         currentColorArrangement[i] = candyColors[randomNumber]\n      }\n\n      if ((currentColorArrangement[i + width]) === '') {\n        currentColorArrangement[i + width] = currentColorArrangement[i]\n        currentColorArrangement[i] = ''\n      }\n    }\n  }\n\n  const dragStart = (e) => {\n    console.log(e.target)\n    console.log('darg start')\n    setSquareBeingDargged(e.target)\n  }\n  const dragDrop = (e) => {\n    console.log(e.target)\n    console.log('darg drop')\n    setSquareBeingReplaced(e.target)\n  }\n  const dragEnd = (e) => {\n    console.log('darg end')\n    \n    const squareBeingDarggedId = parseInt(squareBeingDargged.getAttribute('data-id'))\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDargged.style.backgroundColor\n    currentColorArrangement[squareBeingDarggedId] = squareBeingReplaced.style.backgroundColor\n\n    const validMoves = [\n      squareBeingDarggedId -1,\n      squareBeingDarggedId - width,\n      squareBeingDarggedId +1,\n      squareBeingDarggedId + width\n\n    ]\n\n    const validMove = validMoves.includes(squareBeingReplacedId)\n\n     const isAColumnOfFour = checkForColumnOfFour()\n     const isARowOfFour = checkForRowOfFour()\n     const isAColumnOfThree = checkForColumnOfThree()\n     const isARowOfThree = checkForRowOfThree()\n\n     if (squareBeingReplacedId && validMove && ( isARowOfThree || isARowOfFour || isAColumnOfFour || isARowOfThree)) {\n       setSquareBeingDargged(null)\n        setSquareBeingReplaced(null)\n     } else {\n       currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.style.backgroundColor\n       currentColorArrangement[squareBeingDarggedId] = squareBeingDargged.style.backgroundColor\n       setCurrentColorArrangement([...currentColorArrangement])\n     }\n  }\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n    for(let i = 0; i < width * width; i++) {\n        const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n        randomColorArrangement.push(randomColor)\n    }\n    setCurrentColorArrangement(randomColorArrangement)\n}\n\nuseEffect(() => {\n  createBoard()\n}, [])\n\nuseEffect(() => {\n  const timer = setInterval(() => {\n    checkForColumnOfFour()\n    checkForRowOfFour()\n    checkForColumnOfThree()\n    checkForRowOfThree()\n    moveIntoSquareBelow()\n    setCurrentColorArrangement([...currentColorArrangement]) \n  }, 100)\n  return () => clearInterval(timer)\n\n}, [ checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\nconsole.log(currentColorArrangement)\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColors, index) => (\n          <img\n            key={index}\n            style={{backgroundColor: candyColors}}\n            alt={candyColors}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}