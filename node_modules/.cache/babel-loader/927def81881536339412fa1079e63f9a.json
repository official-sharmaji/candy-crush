{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-condy-crush\\\\candy-crush\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = ['blue', 'green', 'orange', 'purple', 'red', 'yellow'];\n\nconst App = () => {\n  _s();\n\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i < 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangement[square] = '');\n      }\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfThree();\n    }, 100);\n  }, [checkForColumnOfThree]);\n  console.log(currentColorArrangement);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColors, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          backgroundColor: candyColors\n        },\n        alt: candyColors\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"uoaHbVJS2NtlYqhXtmTeW0LXKPg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/react-condy-crush/candy-crush/src/App.js"],"names":["useEffect","useState","width","candyColors","App","currentColorArrangement","setCurrentColorArrangement","checkForColumnOfThree","i","columnOfThree","decidedColor","every","square","forEach","createBoard","randomColorArrangement","randomColor","Math","floor","random","length","push","timer","setInterval","console","log","map","index","backgroundColor"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAmC,OAAnC;;AAEA,MAAMC,KAAK,GAAI,CAAf;AACA,MAAMC,WAAW,GAAG,CAChB,MADgB,EAEhB,OAFgB,EAGhB,QAHgB,EAIhB,QAJgB,EAKhB,KALgB,EAMhB,QANgB,CAApB;;AASA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,uBAAD,EAA0BC,0BAA1B,IAAwDL,QAAQ,CAAE,EAAF,CAAtE;;AAEA,QAAMM,qBAAqB,GAAG,MAAM;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,YAAMC,aAAa,GAAG,CAACD,CAAD,EAAIA,CAAC,GAAEN,KAAP,EAAcM,CAAC,GAAGN,KAAK,GAAG,CAA1B,CAAtB;AACA,YAAMQ,YAAY,GAAGL,uBAAuB,CAACG,CAAD,CAA5C;;AAEA,UAAKC,aAAa,CAACE,KAAd,CAAoBC,MAAM,IAAIP,uBAAuB,CAACO,MAAD,CAAvB,KAAoCF,YAAlE,CAAL,EAAsF;AACpFD,QAAAA,aAAa,CAACI,OAAd,CAAsBD,MAAM,IAAIP,uBAAuB,CAACO,MAAD,CAAvB,GAAkC,EAAlE;AACD;AACF;AACF,GATD;;AAWA,QAAME,WAAW,GAAG,MAAM;AACxB,UAAMC,sBAAsB,GAAG,EAA/B;;AACA,SAAI,IAAIP,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,KAAK,GAAGA,KAA3B,EAAkCM,CAAC,EAAnC,EAAuC;AACnC,YAAMQ,WAAW,GAAGb,WAAW,CAACc,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBhB,WAAW,CAACiB,MAAvC,CAAD,CAA/B;AACAL,MAAAA,sBAAsB,CAACM,IAAvB,CAA4BL,WAA5B;AACH;;AACDV,IAAAA,0BAA0B,CAACS,sBAAD,CAA1B;AACH,GAPC;;AASFf,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC9BhB,MAAAA,qBAAqB;AACtB,KAFwB,EAEtB,GAFsB,CAAzB;AAKD,GANQ,EAMN,CAACA,qBAAD,CANM,CAAT;AAQAiB,EAAAA,OAAO,CAACC,GAAR,CAAYpB,uBAAZ;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBACGA,uBAAuB,CAACqB,GAAxB,CAA4B,CAACvB,WAAD,EAAcwB,KAAd,kBAC3B;AAEE,QAAA,KAAK,EAAE;AAACC,UAAAA,eAAe,EAAEzB;AAAlB,SAFT;AAGE,QAAA,GAAG,EAAEA;AAHP,SACOwB,KADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAlDD;;GAAMvB,G;;KAAAA,G;AAoDN,eAAeA,GAAf","sourcesContent":["import {useEffect, useState } from \"react\"\n\nconst width =  8\nconst candyColors = [\n    'blue',\n    'green',\n    'orange',\n    'purple',\n    'red',\n    'yellow'\n]\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState ([])\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i < 47; i++) {\n      const columnOfThree = [i, i +width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n\n      if ( columnOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangement[square] = '')\n      }\n    }\n  }\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n    for(let i = 0; i < width * width; i++) {\n        const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n        randomColorArrangement.push(randomColor)\n    }\n    setCurrentColorArrangement(randomColorArrangement)\n}\n\nuseEffect(() => {\n  createBoard()\n}, [])\n\nuseEffect(() => {\n  const timer = setInterval(() => {\n    checkForColumnOfThree()    \n  }, 100);\n\n\n}, [checkForColumnOfThree])\n\nconsole.log(currentColorArrangement)\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColors, index : number) => (\n          <img\n            key={index}\n            style={{backgroundColor: candyColors}}\n            alt={candyColors}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}