{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-condy-crush\\\\candy-crush\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = ['blue', 'green', 'orange', 'purple', 'red', 'yellow'];\n\nconst App = () => {\n  _s();\n\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i < 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfFour.forEach(square => currentColorArrangement[square] = '');\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n      if (notValid.includes(i)) continue;\n\n      if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        rowOfFour.forEach(square => currentColorArrangement[square] = '');\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i < 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangement[square] = '');\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n      if (notValid.includes(i)) continue;\n\n      if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        rowOfThree.forEach(square => currentColorArrangement[square] = '');\n      }\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, currentColorArrangement]);\n  console.log(currentColorArrangement);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColors, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          backgroundColor: candyColors\n        },\n        alt: candyColors\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"uoaHbVJS2NtlYqhXtmTeW0LXKPg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/react-condy-crush/candy-crush/src/App.js"],"names":["useEffect","useState","width","candyColors","App","currentColorArrangement","setCurrentColorArrangement","checkForColumnOfFour","i","columnOfFour","decidedColor","every","square","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","createBoard","randomColorArrangement","randomColor","Math","floor","random","length","push","timer","setInterval","clearInterval","console","log","map","index","backgroundColor"],"mappings":"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","sourcesContent":["import {useEffect, useState } from \"react\"\n\nconst width =  8\nconst candyColors = [\n    'blue',\n    'green',\n    'orange',\n    'purple',\n    'red',\n    'yellow'\n]\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState ([])\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i < 39; i++) {\n      const columnOfFour = [i, i +width, i + width * 2, i + width * 3]\n      const decidedColor = currentColorArrangement[i]\n\n      if ( columnOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfFour.forEach(square => currentColorArrangement[square] = '')\n      }\n    }\n  }\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i +2, i +3]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfFour.every(square => currentColorArrangement[square] === decidedColor)) {\n        rowOfFour.forEach(square => currentColorArrangement[square] = '')\n      }\n    }\n  }\n\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i < 47; i++) {\n      const columnOfThree = [i, i +width, i + width * 2]\n      const decidedColor = currentColorArrangement[i]\n\n      if ( columnOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        columnOfThree.forEach(square => currentColorArrangement[square] = '')\n      }\n    }\n  }\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i +2]\n      const decidedColor = currentColorArrangement[i]\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n\n      if (notValid.includes(i)) continue\n\n      if ( rowOfThree.every(square => currentColorArrangement[square] === decidedColor)) {\n        rowOfThree.forEach(square => currentColorArrangement[square] = '')\n      }\n    }\n  }\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n    for(let i = 0; i < width * width; i++) {\n        const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\n        randomColorArrangement.push(randomColor)\n    }\n    setCurrentColorArrangement(randomColorArrangement)\n}\n\nuseEffect(() => {\n  createBoard()\n}, [])\n\nuseEffect(() => {\n  const timer = setInterval(() => {\n    checkForColumnOfFour()\n    checkForRowOfFour()\n    checkForColumnOfThree()\n    checkForRowOfThree()\n    setCurrentColorArrangement([...currentColorArrangement]) \n  }, 100)\n  return () => clearInterval(timer)\n\n}, [ checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, currentColorArrangement])\n\nconsole.log(currentColorArrangement)\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColors, index : number) => (\n          <img\n            key={index}\n            style={{backgroundColor: candyColors}}\n            alt={candyColors}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}